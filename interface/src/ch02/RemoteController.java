package ch02;

public interface RemoteController {

	// 구현된 것이 아무것도 없는 밑그림만 있는 기본 설계도
	// 멤버 변수, 일반 메서드를 가질 수 없고, 오직 추상 메서드와 상수만을 멤버로 가질 수 있다
	// 추상 클래스보다 추상화(구체적인것)가 더 높다고 볼 수 있다
	// 인터페이스는 (제품들의)표준, 약속, 규칙이다
	// 기능적으로 같은 부분이 있다면 인터페이스로 구현해서
	// 이 인터페이스를 사용하는 클래스들은 표준이 생기는 것이다
	// ex) 켜다 = turnOn(),  끄다 = turnOff()
	
	// 인터페이스가 하는 역할
	// 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
	// 일종의 클라이언트와 코드와의 약속이며 클래스나 프로그래밍이 제공하는 명세
	// 클라이언트 프로그램은 인터페이스에 선언된 메서드 명세만 보고 이를 구현할 수 있다
	// 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미이다
	// 다형성이 성립된다 ( 상속의 다형성과 비슷한 느낌 )
	
	// 제약 사항
	// 모든 멤버 변수는 상수여야 한다
	public final int SERAL_NUMBER = 100;
	
	// 모든 메서든는 추상메서드여야 하고, public abstract 키워드는 생략 가능
	public abstract void turnOn(); 	// 생략하지 않은 방법 - 추상 메서드
	void turnOff(); 				// public abstract 생략한 방법 - 추상 메서드
	
}
